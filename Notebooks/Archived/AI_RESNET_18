{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU","gpuClass":"standard"},"cells":[{"cell_type":"code","source":["%matplotlib inline\n","import torchvision.models as models\n","from matplotlib import pyplot as plt\n","import os\n","import numpy as np\n","import collections\n","import pandas as pd\n","import torch\n","import torch.nn as nn\n","import torch.nn.functional as F\n","import torch.optim as optim\n","from torchvision import transforms\n","from torchvision.datasets import ImageFolder\n","from torchsummary import summary\n","import random"],"metadata":{"id":"sIY9PmNx8deC"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["device = torch.device('cuda' if torch.cuda.is_available() else 'cpu')\n","device\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"LeO4JKQx8giK","executionInfo":{"status":"ok","timestamp":1670782229277,"user_tz":300,"elapsed":176,"user":{"displayName":"Cole Fredrick","userId":"14863597284734102720"}},"outputId":"112163ca-51bb-4f59-c15e-ebcfeb23ff90"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["device(type='cuda')"]},"metadata":{},"execution_count":2}]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"nIjojFKy6tEY","executionInfo":{"status":"ok","timestamp":1670782253642,"user_tz":300,"elapsed":24369,"user":{"displayName":"Cole Fredrick","userId":"14863597284734102720"}},"outputId":"3a2d89e7-3c4b-4b50-e8a5-9f0fe0e53561"},"outputs":[{"output_type":"stream","name":"stdout","text":["Drive already mounted at /content/drive/; to attempt to forcibly remount, call drive.mount(\"/content/drive/\", force_remount=True).\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive/')"]},{"cell_type":"code","source":["!pip install roboflow\n","\n","from roboflow import Roboflow\n","rf = Roboflow(api_key=\"DXb4B94A1xpmpoSfBs45\")\n","project = rf.workspace(\"itml-project\").project(\"itml-final-project-ai-versus-non-ai-dataset\")\n","dataset = project.version(1).download(\"folder\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":1000},"id":"hyH9KBNwch3v","outputId":"bf01f293-a50f-4b9b-f849-d9d6330263cd","executionInfo":{"status":"ok","timestamp":1670782281764,"user_tz":300,"elapsed":28126,"user":{"displayName":"Cole Fredrick","userId":"14863597284734102720"}}},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Collecting roboflow\n","  Downloading roboflow-0.2.21-py3-none-any.whl (42 kB)\n","\u001b[K     |████████████████████████████████| 42 kB 843 kB/s \n","\u001b[?25hRequirement already satisfied: Pillow>=7.1.2 in /usr/local/lib/python3.8/dist-packages (from roboflow) (7.1.2)\n","Requirement already satisfied: idna==2.10 in /usr/local/lib/python3.8/dist-packages (from roboflow) (2.10)\n","Collecting chardet==4.0.0\n","  Downloading chardet-4.0.0-py2.py3-none-any.whl (178 kB)\n","\u001b[K     |████████████████████████████████| 178 kB 8.6 MB/s \n","\u001b[?25hRequirement already satisfied: glob2 in /usr/local/lib/python3.8/dist-packages (from roboflow) (0.7)\n","Requirement already satisfied: six in /usr/local/lib/python3.8/dist-packages (from roboflow) (1.15.0)\n","Requirement already satisfied: requests in /usr/local/lib/python3.8/dist-packages (from roboflow) (2.23.0)\n","Collecting wget\n","  Downloading wget-3.2.zip (10 kB)\n","Requirement already satisfied: opencv-python-headless>=4.5.1.48 in /usr/local/lib/python3.8/dist-packages (from roboflow) (4.6.0.66)\n","Requirement already satisfied: matplotlib in /usr/local/lib/python3.8/dist-packages (from roboflow) (3.2.2)\n","Requirement already satisfied: python-dateutil in /usr/local/lib/python3.8/dist-packages (from roboflow) (2.8.2)\n","Collecting pyparsing==2.4.7\n","  Downloading pyparsing-2.4.7-py2.py3-none-any.whl (67 kB)\n","\u001b[K     |████████████████████████████████| 67 kB 7.2 MB/s \n","\u001b[?25hCollecting cycler==0.10.0\n","  Downloading cycler-0.10.0-py2.py3-none-any.whl (6.5 kB)\n","Requirement already satisfied: numpy>=1.18.5 in /usr/local/lib/python3.8/dist-packages (from roboflow) (1.21.6)\n","Collecting certifi==2021.5.30\n","  Downloading certifi-2021.5.30-py2.py3-none-any.whl (145 kB)\n","\u001b[K     |████████████████████████████████| 145 kB 39.9 MB/s \n","\u001b[?25hRequirement already satisfied: PyYAML>=5.3.1 in /usr/local/lib/python3.8/dist-packages (from roboflow) (6.0)\n","Requirement already satisfied: kiwisolver>=1.3.1 in /usr/local/lib/python3.8/dist-packages (from roboflow) (1.4.4)\n","Collecting urllib3==1.26.6\n","  Downloading urllib3-1.26.6-py2.py3-none-any.whl (138 kB)\n","\u001b[K     |████████████████████████████████| 138 kB 68.9 MB/s \n","\u001b[?25hRequirement already satisfied: tqdm>=4.41.0 in /usr/local/lib/python3.8/dist-packages (from roboflow) (4.64.1)\n","Collecting requests-toolbelt\n","  Downloading requests_toolbelt-0.10.1-py2.py3-none-any.whl (54 kB)\n","\u001b[K     |████████████████████████████████| 54 kB 3.7 MB/s \n","\u001b[?25hCollecting python-dotenv\n","  Downloading python_dotenv-0.21.0-py3-none-any.whl (18 kB)\n","Collecting requests\n","  Downloading requests-2.28.1-py3-none-any.whl (62 kB)\n","\u001b[K     |████████████████████████████████| 62 kB 957 kB/s \n","\u001b[?25hRequirement already satisfied: charset-normalizer<3,>=2 in /usr/local/lib/python3.8/dist-packages (from requests->roboflow) (2.1.1)\n","Building wheels for collected packages: wget\n","  Building wheel for wget (setup.py) ... \u001b[?25l\u001b[?25hdone\n","  Created wheel for wget: filename=wget-3.2-py3-none-any.whl size=9674 sha256=616f21c5fcd8161a10dcd6a63427b30751ed2c7885971d038812d88df47c640b\n","  Stored in directory: /root/.cache/pip/wheels/bd/a8/c3/3cf2c14a1837a4e04bd98631724e81f33f462d86a1d895fae0\n","Successfully built wget\n","Installing collected packages: urllib3, certifi, requests, pyparsing, cycler, wget, requests-toolbelt, python-dotenv, chardet, roboflow\n","  Attempting uninstall: urllib3\n","    Found existing installation: urllib3 1.24.3\n","    Uninstalling urllib3-1.24.3:\n","      Successfully uninstalled urllib3-1.24.3\n","  Attempting uninstall: certifi\n","    Found existing installation: certifi 2022.9.24\n","    Uninstalling certifi-2022.9.24:\n","      Successfully uninstalled certifi-2022.9.24\n","  Attempting uninstall: requests\n","    Found existing installation: requests 2.23.0\n","    Uninstalling requests-2.23.0:\n","      Successfully uninstalled requests-2.23.0\n","  Attempting uninstall: pyparsing\n","    Found existing installation: pyparsing 3.0.9\n","    Uninstalling pyparsing-3.0.9:\n","      Successfully uninstalled pyparsing-3.0.9\n","  Attempting uninstall: cycler\n","    Found existing installation: cycler 0.11.0\n","    Uninstalling cycler-0.11.0:\n","      Successfully uninstalled cycler-0.11.0\n","  Attempting uninstall: chardet\n","    Found existing installation: chardet 3.0.4\n","    Uninstalling chardet-3.0.4:\n","      Successfully uninstalled chardet-3.0.4\n","Successfully installed certifi-2021.5.30 chardet-4.0.0 cycler-0.10.0 pyparsing-2.4.7 python-dotenv-0.21.0 requests-2.28.1 requests-toolbelt-0.10.1 roboflow-0.2.21 urllib3-1.26.6 wget-3.2\n"]},{"output_type":"display_data","data":{"application/vnd.colab-display-data+json":{"pip_warning":{"packages":["certifi","chardet","cycler","pyparsing","requests","urllib3"]}}},"metadata":{}},{"output_type":"stream","name":"stdout","text":["loading Roboflow workspace...\n","loading Roboflow project...\n","Downloading Dataset Version Zip in ITML-Final-Project-AI-versus-Non-AI-Dataset-1 to folder: 100% [50303514 / 50303514] bytes\n"]},{"output_type":"stream","name":"stderr","text":["Extracting Dataset Version Zip to ITML-Final-Project-AI-versus-Non-AI-Dataset-1 in folder:: 100%|██████████| 1042/1042 [00:00<00:00, 2199.74it/s]\n"]}]},{"cell_type":"code","source":["dataset.location"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":36},"id":"n6b1lIUEgW3Q","executionInfo":{"status":"ok","timestamp":1670782281765,"user_tz":300,"elapsed":20,"user":{"displayName":"Cole Fredrick","userId":"14863597284734102720"}},"outputId":"c3894d29-7653-4816-85e6-08e67519452c"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["'/content/ITML-Final-Project-AI-versus-Non-AI-Dataset-1'"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":5}]},{"cell_type":"code","source":["preprocess = transforms.Compose([\n","        #transforms.Resize(64),\n","        #transforms.CenterCrop(64),\n","        transforms.ToTensor(),\n","        transforms.Normalize(\n","            mean=[0.5404, 0.5179, 0.5214],\n","            std=[0.1834, 0.2156, 0.2281])\n","])"],"metadata":{"id":"Z2S3HkZVgajs"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from torchvision.datasets import ImageFolder\n","ai_train = '/content/ITML-Final-Project-AI-versus-Non-AI-Dataset-1/train'\n","ai_val = '/content/ITML-Final-Project-AI-versus-Non-AI-Dataset-1/valid'\n","ai_train_set = ImageFolder(ai_train,transform = preprocess)\n","ai_val_set = ImageFolder(ai_val, transform = preprocess)"],"metadata":{"id":"8pOf0V5tlphP"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["print(len(ai_train_set))\n","print(len(ai_val_set))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"lhOvtHVpnKai","executionInfo":{"status":"ok","timestamp":1670782281766,"user_tz":300,"elapsed":18,"user":{"displayName":"Cole Fredrick","userId":"14863597284734102720"}},"outputId":"f3ddbb27-ae92-45cc-8a67-b8d9e0316df2"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["720\n","205\n"]}]},{"cell_type":"code","source":["model = models.resnet34(weights = None)"],"metadata":{"id":"dXWE8L6QoWOH"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import datetime\n","def training_loop(n_epochs, optimizer, model, loss_fn, train_loader):\n","  for epoch in range(1, n_epochs + 1):\n","    loss_train = 0.0\n","    for imgs, labels in train_loader:\n","      imgs = imgs.to(device=device)\n","      labels = labels.to(device=device)\n","      outputs = model(imgs)\n","      loss = loss_fn(outputs, labels)\n","      optimizer.zero_grad()\n","      loss.backward()\n","      optimizer.step()\n","      loss_train += loss.item()\n","    print('{} Epoch {}, Training loss {}'.format(\n","    datetime.datetime.now(), epoch,\n","    loss_train / len(train_loader)))"],"metadata":{"id":"z0s2HqMoo7qA"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["def validate(model, train_loader, val_loader):\n","  for name, loader in [(\"train\", train_loader), (\"val\", val_loader)]:\n","    correct = 0\n","    total = 0\n","    with torch.no_grad():\n","      for imgs, labels in loader:\n","          imgs, labels = imgs.to(device), labels.to(device)\n","          batchsize = imgs.shape[0]\n","          outputs = model(imgs)\n","          _, predicted = torch.max(outputs, dim=1)\n","          total += labels.shape[0]\n","          correct += int((predicted == labels).sum())\n","    print(\"Accuracy {}: {:.2f}\".format(name , correct / total))"],"metadata":{"id":"yhOdVAf2qIQL"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["train_loader = torch.utils.data.DataLoader(ai_train_set, batch_size=64,\n","                                           shuffle=True)  # <1>\n","\n","model = model.to(device=device)  #  <2>\n","optimizer = optim.SGD(model.parameters(), lr=1e-2)  #  <3>\n","loss_fn = nn.CrossEntropyLoss()  #  <4>\n","\n","training_loop(  # <5>\n","    n_epochs = 10,\n","    optimizer = optimizer,\n","    model = model,\n","    loss_fn = loss_fn,\n","    train_loader = train_loader,\n",")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"K-161vTBqL05","executionInfo":{"status":"ok","timestamp":1670782513441,"user_tz":300,"elapsed":231690,"user":{"displayName":"Cole Fredrick","userId":"14863597284734102720"}},"outputId":"2bf489e7-69ef-493c-8e0b-7f17f925d69c"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["2022-12-11 18:11:55.476790 Epoch 1, Training loss 1.8850933065017064\n","2022-12-11 18:12:17.330944 Epoch 2, Training loss 0.6155816813309988\n","2022-12-11 18:12:39.308929 Epoch 3, Training loss 0.4200156331062317\n","2022-12-11 18:13:01.406787 Epoch 4, Training loss 0.35991548995176953\n","2022-12-11 18:13:23.869827 Epoch 5, Training loss 0.293756981069843\n","2022-12-11 18:13:45.757543 Epoch 6, Training loss 0.3589402238527934\n","2022-12-11 18:14:07.795213 Epoch 7, Training loss 0.32043274243672687\n","2022-12-11 18:14:29.818051 Epoch 8, Training loss 0.3074093001584212\n","2022-12-11 18:14:51.793871 Epoch 9, Training loss 0.2943412580837806\n","2022-12-11 18:15:13.310314 Epoch 10, Training loss 0.2294298360745112\n"]}]},{"cell_type":"code","source":["train_loader = torch.utils.data.DataLoader(ai_train_set, batch_size=64,\n","                                           shuffle=False)  # <1>\n","validation_loader = torch.utils.data.DataLoader(ai_val_set, batch_size=64,\n","                                          shuffle=False)"],"metadata":{"id":"H2nhKM3GuUxD"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["validate(model, train_loader, validation_loader)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"tbJIe3-Dz8wY","executionInfo":{"status":"ok","timestamp":1670782532303,"user_tz":300,"elapsed":18864,"user":{"displayName":"Cole Fredrick","userId":"14863597284734102720"}},"outputId":"0622f18d-c6d2-4d39-bfbf-cf2b197d3fbc"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Accuracy train: 0.53\n","Accuracy val: 0.60\n"]}]},{"cell_type":"code","source":["from sklearn.metrics import confusion_matrix\n","\n","y_pred = []\n","y_true = []\n","\n","# iterate over test data\n","for inputs, labels in validation_loader:\n","        inputs=inputs.to(device); labels=labels.to(device)\n","        output = model(inputs) # Feed Network\n","\n","        output = (torch.max(torch.exp(output), 1)[1]).cpu().detach().numpy()\n","        y_pred.extend(output) # Save Prediction\n","        \n","        labels = labels.data.cpu().detach().numpy()\n","        y_true.extend(labels) # Save Truth\n","\n","# constant for classes\n","classes = ('nonai','AI')"],"metadata":{"id":"YELp2wbSKI0r"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["!pip install pandas"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"PoakwqTzKx-q","executionInfo":{"status":"ok","timestamp":1670782538897,"user_tz":300,"elapsed":2562,"user":{"displayName":"Cole Fredrick","userId":"14863597284734102720"}},"outputId":"6bfcc394-70fa-4605-d69b-e22528973ba8"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Requirement already satisfied: pandas in /usr/local/lib/python3.8/dist-packages (1.3.5)\n","Requirement already satisfied: numpy>=1.17.3 in /usr/local/lib/python3.8/dist-packages (from pandas) (1.21.6)\n","Requirement already satisfied: python-dateutil>=2.7.3 in /usr/local/lib/python3.8/dist-packages (from pandas) (2.8.2)\n","Requirement already satisfied: pytz>=2017.3 in /usr/local/lib/python3.8/dist-packages (from pandas) (2022.6)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.8/dist-packages (from python-dateutil>=2.7.3->pandas) (1.15.0)\n"]}]},{"cell_type":"code","source":["# Build confusion matrix\n","from matplotlib import pyplot as plt\n","import pandas as pd\n","import numpy as np\n","cf_matrix = confusion_matrix(y_true, y_pred)\n","df_cm = pd.DataFrame(cf_matrix/np.sum(cf_matrix) *10, index = [i for i in classes],\n","                     columns = [i for i in classes])\n","plt.figure(figsize = (20,10))\n","sn.heatmap(df_cm, annot=True)\n","plt.savefig('CnfMatrix_ResNet18_1.png')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":235},"id":"QfXkgQKrKj8G","executionInfo":{"status":"error","timestamp":1670782539164,"user_tz":300,"elapsed":273,"user":{"displayName":"Cole Fredrick","userId":"14863597284734102720"}},"outputId":"42f68ed1-50c4-486c-9368-4c5c6a8bebab"},"execution_count":null,"outputs":[{"output_type":"error","ename":"NameError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-17-fe5cbeb86b61>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      7\u001b[0m                      columns = [i for i in classes])\n\u001b[1;32m      8\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfigure\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfigsize\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0;36m20\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m10\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 9\u001b[0;31m \u001b[0msn\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mheatmap\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdf_cm\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mannot\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     10\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msavefig\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'CnfMatrix_ResNet18_1.png'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mNameError\u001b[0m: name 'sn' is not defined"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 1440x720 with 0 Axes>"]},"metadata":{}}]}]}